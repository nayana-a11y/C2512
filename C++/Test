// Write a program to read 10 numbers from the user, find their sum. [with array]

//pseudofunction

function findSum(int numbers[], int size) -> int
    sum = 0
    
    for i..size
        sum += numbers[i]
    
    return sum

function findSumTest() 
    input numbers
    
    sum = findSum(numbers)

    print sum

pseudocode:

    findSumTest()


//code
#include <iostream>
using namespace std;

int findSum(int numbers[], int size) {
    int sum = 0;
    
    for (int i = 0; i < size; i++) {
        sum += numbers[i];
    }
    
    return sum;
}

void findSumTest() {
    int numbers[10];
    
    cout << "Enter the 10 numbers: " << endl;
    
    for (int i = 0; i < 10; i++) {
        cin >> numbers[i];
    }
    
    int sum = findSum(numbers, 10);
    cout << "Sum of 10 numbers: " << sum << endl;
}

int main() {
    findSumTest();
    
    return 0;
}



...............................


//Write a program to read 10 numbers from the user, find their sum [without using array]

//pseudofunctions:
function findSumTest(int) -> int
    sum = 0
    input number

    sum += number; 

    print sum 

pseudocode:
    
    findSumTest()

//code
#include <iostream>
using namespace std;

void findSumTest() {
    int number, sum = 0;

    cout << "Enter 10 numbers: " << endl;

    for (int i = 1; i <= 10; i++) {
        cin >> number;
        sum += number;  
    }

    cout << "Sum of 10 numbers: " << sum << endl;
}

int main() {
    
    findSumTest();
    
    return 0;
}


.................


Write a program to find the highest number from 10 numbers.
(user should input numbers)
The highest number should be returned from a function


function findHighest(int a) -> int
    greatest = a[0]
     
    for i..10
        if a[i] > greatest
            greatest = a[i]
        end if
    end for
    
    return greatest

function findHighestTest(void) 

    input numbers    

    greatest = findHighest()

    print greatest


pseudocode:
    findHighestTest();
  


//code

#include <iostream>
using namespace std;

int findHighest(int a[]) {
    int greatest = a[0];
     
    for (int i = 1; i < 10; i++) {
        if (a[i] > greatest) {
            greatest = a[i];
        }
    }
    
    return greatest;
}

void findHighestTest() {
    int a[10];
    int greatest;

    cout << "Enter ten values: ";
    for (int i = 0; i < 10; i++) {
        cin >> a[i];
    }
    
    greatest = findHighest(a);

    cout << "Greatest of ten numbers is " << greatest << endl;
}

int main() {
    findHighestTest();
    
    return 0;
}


................................
Program for reversing a string without using any built in functions.

pseudofunction:

function reverseString() 
    start = 0
    end = 0

    while end != 0
      end ++
     end while
     end --

     while ( start < end )
         temp = start
         start = end
         end = temp

         start ++
         end --
end while
 
function reverseStringTest(void)
    input string
    reverseString()
    print reverse

pseudocode:
reverseStringTest()

//code
#include <iostream>
using namespace std;

void reverseString(char str[]){
    int start = 0;
    int end = 0;
    
    while(str[end] != 0){
        end ++;
    }
    end --;
    
    while(start < end){
        char temp = str[start];
        str[start] = str[end];
        str[end] = temp;
        
        start ++;
        end --;
    }
}

void reverseStringTest(void){
    char str[100];
    cout << "Enter the string : ";
    cin >> str;
    
    reverseString(str);
    cout << "Reversed String : " << str;
}

int main(void){
    reverseStringTest();
    
    return 0;
}



....................................

Write a program that continuously prompts the user to enter a number. The program should add the entered number to the previous valid number if it is divisible by 3 or 5 and display the sum. If the number is not divisible by 3 or 5, display a message indicating this. The program should terminate when the user types any particular character. Additionally, handle invalid input by prompting the user to enter a valid number.
