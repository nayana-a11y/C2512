
#include<iostream>
#include<thread>
#include<shared_mutex>
#include<mutex>
#include<chrono>
#include<vector>
long TIMES = 5000000L;
long count = 0;

std::shared_mutex mt;

void counter() {
    for(long I = 1; I <= TIMES; I++) {
        {
            std::unique_lock<std::shared_mutex> lock(mt);
            count++;
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(500));
    }
}

void displayCount(int id) {
    for(long I = 1; I <= TIMES; I++) {
        {
            std::shared_lock<std::shared_mutex> lock(mt);
            std::cout << "At " << id << ":" << count << std::endl; 
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(500));
    }
}
