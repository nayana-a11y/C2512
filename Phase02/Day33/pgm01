
#include<iostream>
#include<thread>
#include<shared_mutex>
#include<mutex>
#include<chrono>
#include<vector>
long TIMES = 5000000L;
long count = 0;

std::shared_mutex mt;

void counter() {
    for(long I = 1; I <= TIMES; I++) {
        {
            std::unique_lock<std::shared_mutex> lock(mt);
            count++;
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(500));
    }
}

void displayCount(int id) {
    for(long I = 1; I <= TIMES; I++) {
        {
            std::shared_lock<std::shared_mutex> lock(mt);
            std::cout << "At " << id << ":" << count << std::endl; 
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(500));
    }
}




....
#include <iostream>
#include <thread>
#include <vector>
#include <string>

class Prescription {
private:
    std::string prescriptionId;
    double dosage;

public:
    Prescription(std::string id, double dose) : prescriptionId(id), dosage(dose) {}

    double findSum(const std::vector<double>& vec);
    void findMinOfFirstHalf(const std::vector<double>& vec);
    void findMaxOfSecondHalf(const std::vector<double>& vec);
};

// Find the sum of dosages
double Prescription::findSum(const std::vector<double>& vec) {
    double sum = 0;
    for (double dose : vec) {
        sum += dose;
    }
    return sum;
}

// Find the minimum dosage in the first half of the vector
void Prescription::findMinOfFirstHalf(const std::vector<double>& vec) {
    if (vec.empty()) return;

    double min = vec[0];
    int half = (vec.size() - 1) / 2;
    for (int i = 1; i <= half; i++) {
        if (vec[i] < min) {
            min = vec[i];
        }
    }
    std::cout << "The minimum dosage in the first half is: " << min << std::endl;
}

// Find the maximum dosage in the second half of the vector
void Prescription::findMaxOfSecondHalf(const std::vector<double>& vec) {
    if (vec.empty()) return;

    double max = vec[(vec.size() - 1) / 2];
    for (int i = (vec.size() - 1) / 2; i < vec.size(); i++) {
        if (vec[i] > max) {
            max = vec[i];
        }
    }
    std::cout << "The maximum dosage in the second half is: " << max << std::endl;
}

int main() {
    std::string id;
    double dose;
    double sum;

    // Create vector and add 5 dosage values
    std::vector<double> dosages = {10.0, 20.0, 30.0, 40.0, 50.0};

    // Create a Prescription object
    Prescription prescription(id, dose);
    
    // Calculate and display the sum of dosages
    sum = prescription.findSum(dosages);
    std::cout << "The total dosage sum is: " << sum << std::endl;

    // Find and display the minimum dosage in the first half
    prescription.findMinOfFirstHalf(dosages);

    // Find and display the maximum dosage in the second half
    prescription.findMaxOfSecondHalf(dosages);

    return 0;
}


int main() {
    std::thread thrCounter(counter);
    std::vector<std::thread> thrDisplays;
    for(int I = 1; I <= 3; I++) {
        //thrDisplays.push_back(std::thread(displayCount, 101))
        thrDisplays.emplace_back(displayCount, 100 + I);
    }
    
    /*std::thread thrDisplay1(displayCount, 101);
    std::thread thrDisplay2(displayCount, 102);
    std::thread thrDisplay3(displayCount, 103);
    */
    
    thrCounter.join();
    for(int I = 1; I <= 3; I++) {
        thrDisplays[I].join();
    }
    /*
    thrDisplay1.join();
    thrDisplay2.join();
    thrDisplay3.join();
    */
    return 0;
}
