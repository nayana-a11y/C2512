function minAge(ages -->[int] , size -->int) -->int
    define min_ 0
    for i..size

        if ages[i] < min
            min = ages[i]
        end if
    end for 

    return min    



function isOddAge(age -->int) -->bool
    for i..size

        if age[i] % 2 != 0
            return true
        end if
        return false
    end for

    
"Read patients' ages (integer) from keyboard till we read less than zero 
by using array / collection."
Find average age (integer), 
prime ages sum(example: 11, prime number age), 
teenager ages sum, 
minimum age, 
odd ages sum (example: 51), and
2nd maximum adult age.  
Check minimum age is also prime age.
Use coding standards and best practices to write pseudo code and c++ code.
Plan the task codes to make as reusable functions.


pseudo function:
    function readAges(ages -> [int]) -> int                     ->Pitchumani
    function findAvg(ages -> [int], size -> int) -> int         ->Pitchumani
    function isPrime(age -> int) -> bool                        ->Josh
    function sumOfAge(ages -> [int], size -> int) -> int        ->Josh
    function sumPrimeAge(ages -> [int], size -> int) -> int     ->Bhagya
    function isTeenage(age -> int) -> bool                      ->Bhagya
    function teeageSum(ages -> [int], size -> int)              ->Bhagya
    function minAge(ages -> [int], size ->int) -> int           ->Nayana
    function isOddAge(age -> int) -> bool                       ->Nayana
    function findSecondMaxAdultAge(ages -> [int], size) -> int  ->Dhaheen

    testFunction                                                ->Dhaheen

__________________________________________________________________________________________________

    Pitchumani:

    #define MAX_SIZE 100

    function readAges(ages -->[int]) -->int
        int index=0
        int age;
        print "Enter age"
        input age
        while(age>0)
            ages[index]=age
            index = index+1
            input age

        end while

        return index
 

    function findAvg(ages -->[int] , size -->int) --> int
        int avg = sumOfAge(ages -->[int] , size -->int)
        return ((int)avg/2)
    end function

    functionTest()
        int ages[MAX_SIZE]
        int size = readAges(ages)
        int avgOfAge = findAvg(ages, size)
        print avgOfAge
__________________________________________________________________________________________________

    Josh:
    function isPrime(age ->int)-> bool
        if (age < 2)
            return false
        end if

        int squareRoot = sqrt(age)

        for i in (2..squareRoot)
            if (age % i) == 0
                return false
            end if
        end for
        
        return true

    function sumOfAge(ages-> [int], size-> int)-> int
        int sum = 0

        for i in (0..(size-1))
            sum = sum + ages[i]
        end for

        return sum
__________________________________________________________________________________________________

    Bhagya:

    function sumPrimeAge(ages -> [int], size -> int)

        Initialize sum to 0

        For i from 0 to size - 1
            If isPrime(ages[i]) is true
                Add ages[i] to sum
            End if
        end for

        Return sum


    function isTeenage(age)

        If ((age >= 13) and (age <= 19))
            Return true
        Else
            Return false
        


    function teenageSum(ages -> [int], size -> int)

        Initialize sum to 0

            For i from 0 to size - 1
                If isTeenage(ages[i]) is true
                    Add ages[i] to sum
                End if
            end For

            Return sum
            

__________________________________________________________________________________________________

    Nayana:

    function minAge(ages ->[int] , size ->int) ->int
        min = 0

        for i..size
            if ages[i] < min
                min = ages[i]
            end if
        end for 

        return min    


    function isOddAge(age ->int) ->bool
        for i..size
            if age[i]/2==0
                return false
            end if
            return true
        end for
    
    function oddSum(ages -> [int], size -> int)

        Initialize sum to 0

            For i from 0 to size - 1
                If isOddAge(ages[i]) is true
                    Add ages[i] to sum
                End if
            end For

            Return sum
__________________________________________________________________________________________________

    Dhaheen:

    function findSecondMaxAdultAge(ages -> [int], size -> int) -> int
        int firstMax = 0
        int secondMax = 0

        for I in 0..(size-1)
            if (ages[i] > 18 && ages[i] > firstMax)
                firstMax = ages[i]
            end if
        end for
        
        for I in 0..size-1
            if( (ages[i] > 18) && (ages[i] > secondMax) && (ages[i] < firstMax) )
                secondMax = ages[i]
            end if
        end for	
        
        return secondMax

    functionTest:

    function testFunction()

	int ages[MAX_SIZE]
	size = readAges()
	averageAge = findAvg(ages, size)
	primeAgeSum = SumPrimeAge(ages, size) 
	teenSum = teenageSum(ages, size)
	minimumAge = minAge(ages, size)
	oddAgeSum = oddSum(ages, size)
	secondMaxAdultAge = findSecondMaxAdultAge(ages, size)
	
	print averageAge
	print primeAgeSum
	print teenSum
	print minimumAge
	print oddAgeSum
	if(isPrime(minimumAge))
		print("minimum age is prime")
	else
		print("minimum age is not prime")




__________________________________________________________________________________________________

#include <iostream>
#define MAX_SIZE 100
using namespace std;

int readAges(int ages[]){
    int index=0;
    int age;
    cout << "Enter ages:" << endl;
    cin >> age;
    while(age>0){
        ages[index]=age;
        index = index+1;
        cin >> age;
    }
    return index;
}

int sumOfAge(int ages[], int size){
        int sum = 0;

        for (int i=0; i<size ;i++){
            sum = sum + ages[i];
            
        }
        return sum;
}

int findAvg(int ages[], int size){ 
    
    int sumAge = sumOfAge(ages, size);
    int avg = sumAge/size;
    
    return avg;
}

void functionTest(){
    
    int ages[MAX_SIZE];
    
    int size = readAges(ages);
    
    int avgOfAge = findAvg(ages, size);
    
    cout << "Average of input age: " << avgOfAge << endl;
    
}



int main()
{   
    functionTest();
    return 0;
}
